AWSTemplateFormatVersion: 2010-09-09
Description: GraphQLResolverStack9NestedStack nested stack
Parameters:
  GraphQlDsAttributeDataSourceNameParameter:
    Type: String
  GraphQlApiApiIdParameter:
    Type: String
  GraphQlDsBackOfficeUserDataSourceNameParameter:
    Type: String
  GraphQlDsAuthorizationDataSourceNameParameter:
    Type: String
  GraphQlDsCategoryDataSourceNameParameter:
    Type: String
  GraphQlDsCenterDataSourceNameParameter:
    Type: String
  GraphQlDsCenterTypeDataSourceNameParameter:
    Type: String
  GraphQlDsClosedDayDataSourceNameParameter:
    Type: String
  GraphQlDsDaySlotDataSourceNameParameter:
    Type: String
  GraphQlDsEventTypeDataSourceNameParameter:
    Type: String
  GraphQlDsGlobalOrderDataSourceNameParameter:
    Type: String
  GraphQlDsGroupDataSourceNameParameter:
    Type: String
  GraphQlDsHighlightDataSourceNameParameter:
    Type: String
  GraphQlDsLikeDataSourceNameParameter:
    Type: String
  GraphQlDsNewsDataSourceNameParameter:
    Type: String
  GraphQlDsUserDataSourceNameParameter:
    Type: String
  GraphQlDsOrderDataSourceNameParameter:
    Type: String
  GraphQlDsOrderItemDataSourceNameParameter:
    Type: String
  GraphQlDsPaymentDataSourceNameParameter:
    Type: String
  GraphQlDsProductDataSourceNameParameter:
    Type: String
  GraphQlDsPriceUnitDataSourceNameParameter:
    Type: String
  GraphQlDsProviderServiceDataSourceNameParameter:
    Type: String
  GraphQlDsServiceDataSourceNameParameter:
    Type: String
  GraphQlDsOperatorDataSourceNameParameter:
    Type: String
  GraphQlDsElasticSearchDataSourceNameParameter:
    Type: String
Resources:
  GraphQlResolverMutationdeleteAttribute:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: deleteAttribute
      RequestMappingTemplate: |-
        #if( $authCondition )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          }
        } )
          #end
        #end
        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
          $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
          #set( $condition.expressionValues = $expressionValues )
        #end
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
        } #end,
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsAttributeDataSourceNameParameter
  GraphQlResolverMutationdeleteBackOfficeUser:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: deleteBackOfficeUser
      RequestMappingTemplate: |-
        #if( $authCondition )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          }
        } )
          #end
        #end
        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
          $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
          #set( $condition.expressionValues = $expressionValues )
        #end
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
        } #end,
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsBackOfficeUserDataSourceNameParameter
  GraphQlResolverBackOfficeUserRoleauthorizations:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: BackOfficeUserRole
      FieldName: authorizations
      RequestMappingTemplate: |-
        #set( $limit = $util.defaultIfNull($context.args.limit, 10) )
        #set( $query = {
          "expression": "#connectionAttribute = :connectionAttribute",
          "expressionNames": {
              "#connectionAttribute": "backOfficeUserRoleAuthorizationsId"
          },
          "expressionValues": {
              ":connectionAttribute": {
                  "S": "$context.source.id"
            }
          }
        } )
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query":   $util.toJson($query),
          "scanIndexForward":   #if( $context.args.sortDirection )
            #if( $context.args.sortDirection == "ASC" )
        true
            #else
        false
            #end
          #else
        true
          #end,
          "filter":   #if( $context.args.filter )
        $util.transform.toDynamoDBFilterExpression($ctx.args.filter)
          #else
        null
          #end,
          "limit": $limit,
          "nextToken":   #if( $context.args.nextToken )
        "$context.args.nextToken"
          #else
        null
          #end,
          "index": "gsi-BackOfficeUserRole.authorizations"
        }
      ResponseMappingTemplate: |-
        #if( !$result )
          #set( $result = $ctx.result )
        #end
        $util.toJson($result)
      DataSourceName: !Ref GraphQlDsAuthorizationDataSourceNameParameter
  GraphQlResolverQuerygetCategory:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Query
      FieldName: getCategory
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
        } #end
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsCategoryDataSourceNameParameter
  GraphQlResolverMutationupdateCenter:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: updateCenter
      RequestMappingTemplate: >-
        #if( $authCondition && $authCondition.expression != "" )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {},
          "expressionValues": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          },
          "expressionValues": {}
        } )
          #end
        #end

        ## Automatically set the updatedAt timestamp. **

        $util.qr($context.args.input.put("updatedAt",
        $util.defaultIfNull($ctx.args.input.updatedAt,
        $util.time.nowISO8601())))

        $util.qr($context.args.input.put("__typename", "Center"))

        ## Update condition if type is @versioned **

        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
        #end

        #set( $expNames = {} )

        #set( $expValues = {} )

        #set( $expSet = {} )

        #set( $expAdd = {} )

        #set( $expRemove = [] )

        #if( $modelObjectKey )
          #set( $keyFields = [] )
          #foreach( $entry in $modelObjectKey.entrySet() )
            $util.qr($keyFields.add("$entry.key"))
          #end
        #else
          #set( $keyFields = ["id"] )
        #end

        #foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input,
        $keyFields).entrySet() )
          #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey("$entry.key") )
            #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get("$entry.key") )
          #else
            #set( $entryKeyAttributeName = $entry.key )
          #end
          #if( $util.isNull($entry.value) )
            #set( $discard = $expRemove.add("#$entryKeyAttributeName") )
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
          #else
            $util.qr($expSet.put("#$entryKeyAttributeName", ":$entryKeyAttributeName"))
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
            $util.qr($expValues.put(":$entryKeyAttributeName", $util.dynamodb.toDynamoDB($entry.value)))
          #end
        #end

        #set( $expression = "" )

        #if( !$expSet.isEmpty() )
          #set( $expression = "SET" )
          #foreach( $entry in $expSet.entrySet() )
            #set( $expression = "$expression $entry.key = $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expAdd.isEmpty() )
          #set( $expression = "$expression ADD" )
          #foreach( $entry in $expAdd.entrySet() )
            #set( $expression = "$expression $entry.key $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expRemove.isEmpty() )
          #set( $expression = "$expression REMOVE" )
          #foreach( $entry in $expRemove )
            #set( $expression = "$expression $entry" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #set( $update = {} )

        $util.qr($update.put("expression", "$expression"))

        #if( !$expNames.isEmpty() )
          $util.qr($update.put("expressionNames", $expNames))
        #end

        #if( !$expValues.isEmpty() )
          $util.qr($update.put("expressionValues", $expValues))
        #end

        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": {
              "S": "$context.args.input.id"
          }
        } #end,
          "update": $util.toJson($update),
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsCenterDataSourceNameParameter
  GraphQlResolverQuerygetCenterType:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Query
      FieldName: getCenterType
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
        } #end
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsCenterTypeDataSourceNameParameter
  GraphQlResolverMutationupdateClosedDay:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: updateClosedDay
      RequestMappingTemplate: >-
        #if( $authCondition && $authCondition.expression != "" )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {},
          "expressionValues": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          },
          "expressionValues": {}
        } )
          #end
        #end

        ## Automatically set the updatedAt timestamp. **

        $util.qr($context.args.input.put("updatedAt",
        $util.defaultIfNull($ctx.args.input.updatedAt,
        $util.time.nowISO8601())))

        $util.qr($context.args.input.put("__typename", "ClosedDay"))

        ## Update condition if type is @versioned **

        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
        #end

        #set( $expNames = {} )

        #set( $expValues = {} )

        #set( $expSet = {} )

        #set( $expAdd = {} )

        #set( $expRemove = [] )

        #if( $modelObjectKey )
          #set( $keyFields = [] )
          #foreach( $entry in $modelObjectKey.entrySet() )
            $util.qr($keyFields.add("$entry.key"))
          #end
        #else
          #set( $keyFields = ["id"] )
        #end

        #foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input,
        $keyFields).entrySet() )
          #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey("$entry.key") )
            #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get("$entry.key") )
          #else
            #set( $entryKeyAttributeName = $entry.key )
          #end
          #if( $util.isNull($entry.value) )
            #set( $discard = $expRemove.add("#$entryKeyAttributeName") )
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
          #else
            $util.qr($expSet.put("#$entryKeyAttributeName", ":$entryKeyAttributeName"))
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
            $util.qr($expValues.put(":$entryKeyAttributeName", $util.dynamodb.toDynamoDB($entry.value)))
          #end
        #end

        #set( $expression = "" )

        #if( !$expSet.isEmpty() )
          #set( $expression = "SET" )
          #foreach( $entry in $expSet.entrySet() )
            #set( $expression = "$expression $entry.key = $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expAdd.isEmpty() )
          #set( $expression = "$expression ADD" )
          #foreach( $entry in $expAdd.entrySet() )
            #set( $expression = "$expression $entry.key $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expRemove.isEmpty() )
          #set( $expression = "$expression REMOVE" )
          #foreach( $entry in $expRemove )
            #set( $expression = "$expression $entry" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #set( $update = {} )

        $util.qr($update.put("expression", "$expression"))

        #if( !$expNames.isEmpty() )
          $util.qr($update.put("expressionNames", $expNames))
        #end

        #if( !$expValues.isEmpty() )
          $util.qr($update.put("expressionValues", $expValues))
        #end

        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": {
              "S": "$context.args.input.id"
          }
        } #end,
          "update": $util.toJson($update),
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsClosedDayDataSourceNameParameter
  GraphQlResolverMutationupdateDaySlot:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: updateDaySlot
      RequestMappingTemplate: >-
        #if( $authCondition && $authCondition.expression != "" )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {},
          "expressionValues": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          },
          "expressionValues": {}
        } )
          #end
        #end

        ## Automatically set the updatedAt timestamp. **

        $util.qr($context.args.input.put("updatedAt",
        $util.defaultIfNull($ctx.args.input.updatedAt,
        $util.time.nowISO8601())))

        $util.qr($context.args.input.put("__typename", "DaySlot"))

        ## Update condition if type is @versioned **

        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
        #end

        #set( $expNames = {} )

        #set( $expValues = {} )

        #set( $expSet = {} )

        #set( $expAdd = {} )

        #set( $expRemove = [] )

        #if( $modelObjectKey )
          #set( $keyFields = [] )
          #foreach( $entry in $modelObjectKey.entrySet() )
            $util.qr($keyFields.add("$entry.key"))
          #end
        #else
          #set( $keyFields = ["id"] )
        #end

        #foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input,
        $keyFields).entrySet() )
          #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey("$entry.key") )
            #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get("$entry.key") )
          #else
            #set( $entryKeyAttributeName = $entry.key )
          #end
          #if( $util.isNull($entry.value) )
            #set( $discard = $expRemove.add("#$entryKeyAttributeName") )
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
          #else
            $util.qr($expSet.put("#$entryKeyAttributeName", ":$entryKeyAttributeName"))
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
            $util.qr($expValues.put(":$entryKeyAttributeName", $util.dynamodb.toDynamoDB($entry.value)))
          #end
        #end

        #set( $expression = "" )

        #if( !$expSet.isEmpty() )
          #set( $expression = "SET" )
          #foreach( $entry in $expSet.entrySet() )
            #set( $expression = "$expression $entry.key = $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expAdd.isEmpty() )
          #set( $expression = "$expression ADD" )
          #foreach( $entry in $expAdd.entrySet() )
            #set( $expression = "$expression $entry.key $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expRemove.isEmpty() )
          #set( $expression = "$expression REMOVE" )
          #foreach( $entry in $expRemove )
            #set( $expression = "$expression $entry" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #set( $update = {} )

        $util.qr($update.put("expression", "$expression"))

        #if( !$expNames.isEmpty() )
          $util.qr($update.put("expressionNames", $expNames))
        #end

        #if( !$expValues.isEmpty() )
          $util.qr($update.put("expressionValues", $expValues))
        #end

        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": {
              "S": "$context.args.input.id"
          }
        } #end,
          "update": $util.toJson($update),
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsDaySlotDataSourceNameParameter
  GraphQlResolverEventtype:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Event
      FieldName: type
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
              "id": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.eventTypeId, "___xamznone____"))
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsEventTypeDataSourceNameParameter
  GraphQlResolverMutationdeleteGlobalOrder:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: deleteGlobalOrder
      RequestMappingTemplate: |-
        #if( $authCondition )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          }
        } )
          #end
        #end
        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
          $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
          #set( $condition.expressionValues = $expressionValues )
        #end
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
        } #end,
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsGlobalOrderDataSourceNameParameter
  GraphQlResolverMutationupdateGroup:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: updateGroup
      RequestMappingTemplate: >-
        #if( $authCondition && $authCondition.expression != "" )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {},
          "expressionValues": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          },
          "expressionValues": {}
        } )
          #end
        #end

        ## Automatically set the updatedAt timestamp. **

        $util.qr($context.args.input.put("updatedAt",
        $util.defaultIfNull($ctx.args.input.updatedAt,
        $util.time.nowISO8601())))

        $util.qr($context.args.input.put("__typename", "Group"))

        ## Update condition if type is @versioned **

        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
        #end

        #set( $expNames = {} )

        #set( $expValues = {} )

        #set( $expSet = {} )

        #set( $expAdd = {} )

        #set( $expRemove = [] )

        #if( $modelObjectKey )
          #set( $keyFields = [] )
          #foreach( $entry in $modelObjectKey.entrySet() )
            $util.qr($keyFields.add("$entry.key"))
          #end
        #else
          #set( $keyFields = ["id"] )
        #end

        #foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input,
        $keyFields).entrySet() )
          #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey("$entry.key") )
            #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get("$entry.key") )
          #else
            #set( $entryKeyAttributeName = $entry.key )
          #end
          #if( $util.isNull($entry.value) )
            #set( $discard = $expRemove.add("#$entryKeyAttributeName") )
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
          #else
            $util.qr($expSet.put("#$entryKeyAttributeName", ":$entryKeyAttributeName"))
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
            $util.qr($expValues.put(":$entryKeyAttributeName", $util.dynamodb.toDynamoDB($entry.value)))
          #end
        #end

        #set( $expression = "" )

        #if( !$expSet.isEmpty() )
          #set( $expression = "SET" )
          #foreach( $entry in $expSet.entrySet() )
            #set( $expression = "$expression $entry.key = $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expAdd.isEmpty() )
          #set( $expression = "$expression ADD" )
          #foreach( $entry in $expAdd.entrySet() )
            #set( $expression = "$expression $entry.key $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expRemove.isEmpty() )
          #set( $expression = "$expression REMOVE" )
          #foreach( $entry in $expRemove )
            #set( $expression = "$expression $entry" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #set( $update = {} )

        $util.qr($update.put("expression", "$expression"))

        #if( !$expNames.isEmpty() )
          $util.qr($update.put("expressionNames", $expNames))
        #end

        #if( !$expValues.isEmpty() )
          $util.qr($update.put("expressionValues", $expValues))
        #end

        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": {
              "S": "$context.args.input.id"
          }
        } #end,
          "update": $util.toJson($update),
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsGroupDataSourceNameParameter
  GraphQlResolverGroupBackOfficeUserbackOfficeUser:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: GroupBackOfficeUser
      FieldName: backOfficeUser
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
              "id": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.groupBackOfficeUserBackOfficeUserId, "___xamznone____"))
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsBackOfficeUserDataSourceNameParameter
  GraphQlResolverMutationdeleteHighlight:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: deleteHighlight
      RequestMappingTemplate: |-
        #if( $authCondition )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          }
        } )
          #end
        #end
        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
          $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
          #set( $condition.expressionValues = $expressionValues )
        #end
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
        } #end,
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsHighlightDataSourceNameParameter
  GraphQlResolverQuerygetLike:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Query
      FieldName: getLike
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
        } #end
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsLikeDataSourceNameParameter
  GraphQlResolverMutationupdateNews:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: updateNews
      RequestMappingTemplate: >-
        #if( $authCondition && $authCondition.expression != "" )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {},
          "expressionValues": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          },
          "expressionValues": {}
        } )
          #end
        #end

        ## Automatically set the updatedAt timestamp. **

        $util.qr($context.args.input.put("updatedAt",
        $util.defaultIfNull($ctx.args.input.updatedAt,
        $util.time.nowISO8601())))

        $util.qr($context.args.input.put("__typename", "News"))

        ## Update condition if type is @versioned **

        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
        #end

        #set( $expNames = {} )

        #set( $expValues = {} )

        #set( $expSet = {} )

        #set( $expAdd = {} )

        #set( $expRemove = [] )

        #if( $modelObjectKey )
          #set( $keyFields = [] )
          #foreach( $entry in $modelObjectKey.entrySet() )
            $util.qr($keyFields.add("$entry.key"))
          #end
        #else
          #set( $keyFields = ["id"] )
        #end

        #foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input,
        $keyFields).entrySet() )
          #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey("$entry.key") )
            #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get("$entry.key") )
          #else
            #set( $entryKeyAttributeName = $entry.key )
          #end
          #if( $util.isNull($entry.value) )
            #set( $discard = $expRemove.add("#$entryKeyAttributeName") )
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
          #else
            $util.qr($expSet.put("#$entryKeyAttributeName", ":$entryKeyAttributeName"))
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
            $util.qr($expValues.put(":$entryKeyAttributeName", $util.dynamodb.toDynamoDB($entry.value)))
          #end
        #end

        #set( $expression = "" )

        #if( !$expSet.isEmpty() )
          #set( $expression = "SET" )
          #foreach( $entry in $expSet.entrySet() )
            #set( $expression = "$expression $entry.key = $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expAdd.isEmpty() )
          #set( $expression = "$expression ADD" )
          #foreach( $entry in $expAdd.entrySet() )
            #set( $expression = "$expression $entry.key $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expRemove.isEmpty() )
          #set( $expression = "$expression REMOVE" )
          #foreach( $entry in $expRemove )
            #set( $expression = "$expression $entry" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #set( $update = {} )

        $util.qr($update.put("expression", "$expression"))

        #if( !$expNames.isEmpty() )
          $util.qr($update.put("expressionNames", $expNames))
        #end

        #if( !$expValues.isEmpty() )
          $util.qr($update.put("expressionValues", $expValues))
        #end

        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": {
              "S": "$context.args.input.id"
          }
        } #end,
          "update": $util.toJson($update),
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsNewsDataSourceNameParameter
  GraphQlResolverOperatorusers:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Operator
      FieldName: users
      RequestMappingTemplate: |-
        #set( $limit = $util.defaultIfNull($context.args.limit, 10) )
        #set( $query = {
          "expression": "#connectionAttribute = :connectionAttribute",
          "expressionNames": {
              "#connectionAttribute": "userOperatorId"
          },
          "expressionValues": {
              ":connectionAttribute": {
                  "S": "$context.source.id"
            }
          }
        } )
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query":   $util.toJson($query),
          "scanIndexForward":   #if( $context.args.sortDirection )
            #if( $context.args.sortDirection == "ASC" )
        true
            #else
        false
            #end
          #else
        true
          #end,
          "filter":   #if( $context.args.filter )
        $util.transform.toDynamoDBFilterExpression($ctx.args.filter)
          #else
        null
          #end,
          "limit": $limit,
          "nextToken":   #if( $context.args.nextToken )
        "$context.args.nextToken"
          #else
        null
          #end,
          "index": "gsi-OperatorUsers"
        }
      ResponseMappingTemplate: |-
        #if( !$result )
          #set( $result = $ctx.result )
        #end
        $util.toJson($result)
      DataSourceName: !Ref GraphQlDsUserDataSourceNameParameter
  GraphQlResolverMutationupdateOrder:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: updateOrder
      RequestMappingTemplate: >-
        #if( $authCondition && $authCondition.expression != "" )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {},
          "expressionValues": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          },
          "expressionValues": {}
        } )
          #end
        #end

        ## Automatically set the updatedAt timestamp. **

        $util.qr($context.args.input.put("updatedAt",
        $util.defaultIfNull($ctx.args.input.updatedAt,
        $util.time.nowISO8601())))

        $util.qr($context.args.input.put("__typename", "Order"))

        ## Update condition if type is @versioned **

        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
        #end

        #set( $expNames = {} )

        #set( $expValues = {} )

        #set( $expSet = {} )

        #set( $expAdd = {} )

        #set( $expRemove = [] )

        #if( $modelObjectKey )
          #set( $keyFields = [] )
          #foreach( $entry in $modelObjectKey.entrySet() )
            $util.qr($keyFields.add("$entry.key"))
          #end
        #else
          #set( $keyFields = ["id"] )
        #end

        #foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input,
        $keyFields).entrySet() )
          #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey("$entry.key") )
            #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get("$entry.key") )
          #else
            #set( $entryKeyAttributeName = $entry.key )
          #end
          #if( $util.isNull($entry.value) )
            #set( $discard = $expRemove.add("#$entryKeyAttributeName") )
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
          #else
            $util.qr($expSet.put("#$entryKeyAttributeName", ":$entryKeyAttributeName"))
            $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
            $util.qr($expValues.put(":$entryKeyAttributeName", $util.dynamodb.toDynamoDB($entry.value)))
          #end
        #end

        #set( $expression = "" )

        #if( !$expSet.isEmpty() )
          #set( $expression = "SET" )
          #foreach( $entry in $expSet.entrySet() )
            #set( $expression = "$expression $entry.key = $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expAdd.isEmpty() )
          #set( $expression = "$expression ADD" )
          #foreach( $entry in $expAdd.entrySet() )
            #set( $expression = "$expression $entry.key $entry.value" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #if( !$expRemove.isEmpty() )
          #set( $expression = "$expression REMOVE" )
          #foreach( $entry in $expRemove )
            #set( $expression = "$expression $entry" )
            #if( $foreach.hasNext() )
              #set( $expression = "$expression," )
            #end
          #end
        #end

        #set( $update = {} )

        $util.qr($update.put("expression", "$expression"))

        #if( !$expNames.isEmpty() )
          $util.qr($update.put("expressionNames", $expNames))
        #end

        #if( !$expValues.isEmpty() )
          $util.qr($update.put("expressionValues", $expValues))
        #end

        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": {
              "S": "$context.args.input.id"
          }
        } #end,
          "update": $util.toJson($update),
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsOrderDataSourceNameParameter
  GraphQlResolverMutationdeleteOrderItem:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: deleteOrderItem
      RequestMappingTemplate: |-
        #if( $authCondition )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          }
        } )
          #end
        #end
        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
          $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
          #set( $condition.expressionValues = $expressionValues )
        #end
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
        } #end,
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsOrderItemDataSourceNameParameter
  GraphQlResolverQuerygetPayment:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Query
      FieldName: getPayment
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
        } #end
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsPaymentDataSourceNameParameter
  GraphQlResolverQuerygetProduct:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Query
      FieldName: getProduct
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
        } #end
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsProductDataSourceNameParameter
  GraphQlResolverProductpriceUnits:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Product
      FieldName: priceUnits
      RequestMappingTemplate: |-
        #set( $limit = $util.defaultIfNull($context.args.limit, 10) )
        #set( $query = {
          "expression": "#connectionAttribute = :connectionAttribute",
          "expressionNames": {
              "#connectionAttribute": "productPriceUnitsId"
          },
          "expressionValues": {
              ":connectionAttribute": {
                  "S": "$context.source.id"
            }
          }
        } )
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query":   $util.toJson($query),
          "scanIndexForward":   #if( $context.args.sortDirection )
            #if( $context.args.sortDirection == "ASC" )
        true
            #else
        false
            #end
          #else
        true
          #end,
          "filter":   #if( $context.args.filter )
        $util.transform.toDynamoDBFilterExpression($ctx.args.filter)
          #else
        null
          #end,
          "limit": $limit,
          "nextToken":   #if( $context.args.nextToken )
        "$context.args.nextToken"
          #else
        null
          #end,
          "index": "gsi-Product.priceUnits"
        }
      ResponseMappingTemplate: |-
        #if( !$result )
          #set( $result = $ctx.result )
        #end
        $util.toJson($result)
      DataSourceName: !Ref GraphQlDsPriceUnitDataSourceNameParameter
  GraphQlResolverQuerygetProviderService:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Query
      FieldName: getProviderService
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
        } #end
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsProviderServiceDataSourceNameParameter
  GraphQlResolverMutationdeleteService:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Mutation
      FieldName: deleteService
      RequestMappingTemplate: |-
        #if( $authCondition )
          #set( $condition = $authCondition )
          #if( $modelObjectKey )
            #foreach( $entry in $modelObjectKey.entrySet() )
              $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
            $util.qr($condition.expressionNames.put("#id", "id"))
          #end
        #else
          #if( $modelObjectKey )
            #set( $condition = {
          "expression": "",
          "expressionNames": {}
        } )
            #foreach( $entry in $modelObjectKey.entrySet() )
              #if( $velocityCount == 1 )
                $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
              #else
                $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
              #end
              $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
            #end
          #else
            #set( $condition = {
          "expression": "attribute_exists(#id)",
          "expressionNames": {
              "#id": "id"
          }
        } )
          #end
        #end
        #if( $versionedCondition )
          $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
          $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
          #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
          $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
          #set( $condition.expressionValues = $expressionValues )
        #end
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
        } #end,
          "condition": $util.toJson($condition)
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsServiceDataSourceNameParameter
  GraphQlResolverUnavailabilitycenter:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Unavailability
      FieldName: center
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
              "id": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.unavailabilityCenterId, "___xamznone____"))
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsCenterDataSourceNameParameter
  GraphQlResolverUserglobalOrders:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: User
      FieldName: globalOrders
      RequestMappingTemplate: |-
        #set( $limit = $util.defaultIfNull($context.args.limit, 10) )
        #set( $query = {
          "expression": "#connectionAttribute = :connectionAttribute",
          "expressionNames": {
              "#connectionAttribute": "globalOrderUserId"
          },
          "expressionValues": {
              ":connectionAttribute": {
                  "S": "$context.source.id"
            }
          }
        } )
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query":   $util.toJson($query),
          "scanIndexForward":   #if( $context.args.sortDirection )
            #if( $context.args.sortDirection == "ASC" )
        true
            #else
        false
            #end
          #else
        true
          #end,
          "filter":   #if( $context.args.filter )
        $util.transform.toDynamoDBFilterExpression($ctx.args.filter)
          #else
        null
          #end,
          "limit": $limit,
          "nextToken":   #if( $context.args.nextToken )
        "$context.args.nextToken"
          #else
        null
          #end,
          "index": "gsi-UserGlobalOrders"
        }
      ResponseMappingTemplate: |-
        #if( !$result )
          #set( $result = $ctx.result )
        #end
        $util.toJson($result)
      DataSourceName: !Ref GraphQlDsGlobalOrderDataSourceNameParameter
  GraphQlResolverUserRoleoperator:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: UserRole
      FieldName: operator
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
              "id": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.userRoleOperatorId, "___xamznone____"))
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
      DataSourceName: !Ref GraphQlDsOperatorDataSourceNameParameter
  GraphQlResolverQuerysearchBackOfficeUsers:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Query
      FieldName: searchBackOfficeUsers
      RequestMappingTemplate: |-
        #set( $indexPath = "/grdbackofficeuser-dev/doc/_search" )
        #set( $nonKeywordFields = ["enabled", "markForDelete"] )
        #if( $util.isNullOrEmpty($context.args.sort) )
          #set( $sortDirection = "desc" )
          #set( $sortField = "id" )
        #else
          #set( $sortDirection = $util.defaultIfNull($context.args.sort.direction, "desc") )
          #set( $sortField = $util.defaultIfNull($context.args.sort.field, "id") )
        #end
        {
          "version": "2017-02-28",
          "operation": "GET",
          "path": "$indexPath",
          "params": {
              "body":     {
                        #if( $context.args.nextToken )"search_after": ["$context.args.nextToken"], #end
                        "size": #if( $context.args.limit ) $context.args.limit #else 10 #end,
                        "sort": [{ #if($nonKeywordFields.contains($sortField))    "$sortField" #else "${sortField}.keyword" #end : {    "order" : "$sortDirection"} }],
                        "query": #if( $context.args.filter )
        $util.transform.toElasticsearchQueryDSL($ctx.args.filter)
        #else
        {
              "match_all": {}
          }
        #end
                        }
          }
        }
      ResponseMappingTemplate: |-
        #set( $es_items = [] )
        #foreach( $entry in $context.result.hits.hits )
          #if( !$foreach.hasNext )
            #set( $nextToken = $entry.sort.get(0) )
          #end
          $util.qr($es_items.add($entry.get("_source")))
        #end
        $util.toJson({
          "items": $es_items,
          "total": $ctx.result.hits.total,
          "nextToken": $nextToken
        })
      DataSourceName: !Ref GraphQlDsElasticSearchDataSourceNameParameter
  GraphQlResolverQuerysearchServices:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: []
    Properties:
      ApiId: !Ref GraphQlApiApiIdParameter
      TypeName: Query
      FieldName: searchServices
      RequestMappingTemplate: |-
        #set( $indexPath = "/grdservice-dev/doc/_search" )
        #set( $nonKeywordFields = ["authorized", "enabled", "markForDelete"] )
        #if( $util.isNullOrEmpty($context.args.sort) )
          #set( $sortDirection = "desc" )
          #set( $sortField = "id" )
        #else
          #set( $sortDirection = $util.defaultIfNull($context.args.sort.direction, "desc") )
          #set( $sortField = $util.defaultIfNull($context.args.sort.field, "id") )
        #end
        {
          "version": "2017-02-28",
          "operation": "GET",
          "path": "$indexPath",
          "params": {
              "body":     {
                        #if( $context.args.nextToken )"search_after": ["$context.args.nextToken"], #end
                        "size": #if( $context.args.limit ) $context.args.limit #else 10 #end,
                        "sort": [{ #if($nonKeywordFields.contains($sortField))    "$sortField" #else "${sortField}.keyword" #end : {    "order" : "$sortDirection"} }],
                        "query": #if( $context.args.filter )
        $util.transform.toElasticsearchQueryDSL($ctx.args.filter)
        #else
        {
              "match_all": {}
          }
        #end
                        }
          }
        }
      ResponseMappingTemplate: |-
        #set( $es_items = [] )
        #foreach( $entry in $context.result.hits.hits )
          #if( !$foreach.hasNext )
            #set( $nextToken = $entry.sort.get(0) )
          #end
          $util.qr($es_items.add($entry.get("_source")))
        #end
        $util.toJson({
          "items": $es_items,
          "total": $ctx.result.hits.total,
          "nextToken": $nextToken
        })
      DataSourceName: !Ref GraphQlDsElasticSearchDataSourceNameParameter
Outputs: {}
